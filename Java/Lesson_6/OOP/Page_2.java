package Java.Lesson_6.OOP;

import java.util.Arrays;
import java.util.HashSet;

/*---------------<<< §2. Введение в создание собственных типов >>>---------------------------
    Java является объектно-ориентированным языком.
    Программа, написанная на Java, должна соответствовать парадигме объектно-ориентированного программирования.

    Следует понимать, что принципы ООП не просто определяют структуру программы. Это некий фундаментальный подход, с которым предстоит разобраться.

    Спагетти-код – код, в котором данные связаны с методами для их обработки.
    И в итоге может получиться так, что отдельные ветви алгоритма переплетаются, образуя запутанный клубок, в котором невозможно разобраться
                          -----------------------------------------
    Решение проблемы получило название объектно-ориентированное программирование или: объектно-ориентированное проектирование или ООП.

    При использовании данного подхода, упорядочивание кода базируется на объединении данных, с одной стороны, и методов для обработки этих данных,
    с другой стороны, в одно целое. Это «одно целое» в ООП называется экземпляром класса.

    Вся программа при этом имеет блочную структуру, что существенно упрощает анализ кода и внесение в него изменения.
    ООП – искусственный прием, в большинстве случаев не зависящий, от языка программирования.
                          -------------------------------------------
    Если говорят, что разработка идет с использованием ООП – это говорит о том, что используются классы и экземпляры этих классов.

    Каждый экземпляр класса определяется общим шаблоном, который называется классом.

    В рамках класса задается общая структура, на основе которой затем создаются экземпляры.

    Данные, относящиеся к классу, называются полями класса, а код для их обработки — методами класса.
                          -------------------------------------------
    Примеры:
      Автомобиль – Lada 2107 UIN 123123123, S/N 789789789
      Здание – Дом по адресу г.Москва ул. Ленина 21к1
      Ученик – Сергей Камянецкий, 51 МиИ, СмолГУ
      Мобильный телефон – Siemens CX60 IMEI 1234520032022
      Геометрическая фигура – додекаэдр
      Работник – Смиронова Т.В. 14.02.1994, ID 728, Компания GeekBrains
      Котики – Барсик
*/
public class Page_2 {
    public static void main(String[] args) {
        // Клиентский код - код, который вызывает экземпляры класса (в нашем случае: Worker - экземпляр класса, а клиентский код - точка входа main).

        Worker w1 = new Worker();      // Конкретный экземпляр w1 - какого-то Worker. После описания класса Worker появляется новый тип (экземпляр этого класса).
        w1.firstName = "Имя_1";        // w1 - имя переменной типа Worker, firstName - имя рабочего (экземпляра класса).
        w1.lastName = "Фамилия_1";
        w1.salary = 100;
        w1.id = 1000;

        Worker w4 = new Worker();
        w4.firstName = "Имя_1";
        w4.lastName = "Фамилия_1";
        w4.salary = 100;
        w4.id = 1000;
        //----------------------

        Worker w2 = new Worker();
        w2.firstName = "Имя_2";
        w2.lastName = "Фамилия_2";
        w2.salary = 200;
        w2.id = 2000;

        Worker w3 = new Worker();
        w3.firstName = "Имя_3";
        w3.lastName = "Фамилия_3";
        w3.salary = 300;
        w3.id = 3000;

        System.out.println(w1.toString());   // Lesson_6.OOP.Worker@eed1f14    eed1f14 - хеш-код (то что идет после знака - @).
        System.out.println(w2.toString());
        System.out.println(w3);
        System.out.println(w4);  // Lesson_6.OOP.Worker@119d7047    119d7047 - хеш-код w1 и w2 отличаются, поэтому они разные.
        System.out.println();

        System.out.println(w1 == w4);
        System.out.println(w1.equals(w4));

        var workers = new HashSet<Worker>(Arrays.asList(w1, w2, w3));  // Коллекция Worker
        System.out.println(workers.contains(w4));                      // w1 и w4 абсолютно одинаковы с точки зрения полей, но для Java они разные.
    }
}
