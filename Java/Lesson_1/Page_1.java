package Java.Lesson_1;

// Однострочный комментарий.

/**
 * Многострочный комментарий.
 *
 * Код в java всегда находится в классах. Из классов, как из кирпичиков, образуются программы.
 * В программе обязательно должен быть класс с методом main. Он и запускает программу.
 */
public class Page_1 {
    static String getType(Object o){
        return o.getClass() .getSimpleName();
    }   // Неявная типизация

    public static void main(String[] args) {

/*------------------(Явная типизация данных)-------------------------
    Типы данных в Java делятся на две категории:
     - объектно-ориентированные (ссылочные). (массивы, классы и интерфейсы)
     - не объектно-ориентированные (примитивные).

    Примитивные типы данных (всего 8):
    - целочисленные:
        byte b1 = 127;                   //  8 бит  // хранит целое число от -128 до 127
        short sh = 32700;                // 16 бит  // хранит целое число от -32768 до 32767
        int number = 2000000000;         // 32 бита // хранит целое число от -2147483648 до 2147483647 (по умолчанию все целые числа int)
        long l = 200000000000000000L;    // 64 бита // хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 (в конце числа обязательно L)
    - с плавающей точкой:
        float f = 11.2F;                 // 32 бита // хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 (в конце числа обязательно f) Для отделения целой части используют не "," а "."
        double d = 111.2;                // 64 бита // хранит число с плавающей точкой от ±4.9*10-324 до ±1.8*10308 (по умолчанию все числовые значения с точкой double)
    - символьные:
        char ch = 65535;                 // 16 бит // хранит одиночный символ в кодировке UTF-16, поэтому диапазон хранимых значений от 0 до 65535
        char ch2 = 'D';                                обязательно использовать одинарные кавычки ''
    - логические:
        boolean bool = true;                           хранит значение true или false
    _________________________________
        String str = "hello";
 */
        System.out.println("Явная типизация");

        short age = 10;
        int salary = 123456;
        System.out.println(age);
        System.out.println(salary);

        float e = 2.7f;
        double pi = 3.1415;
        System.out.println(e);
        System.out.println(pi);

        char ch = '1';
        System.out.println(Character.isDigit(ch));
        ch = 'a';
        System.out.println(Character.isDigit(ch));

        boolean flag1 = 123 <= 234;
        System.out.println(flag1);
        boolean flag2 = 123 >= 234 || flag1;
        System.out.println(flag2);
        boolean flag3 = flag1 ^ flag2;
        System.out.println(flag3);

        String msg = "Hello world!";
        System.out.println(msg);
        System.out.println();

//------------------(Неявная типизация данных)-------------------------
//        var используется для хранения промежуточных результатов вычислений. И, в отличие от полей, объявляются, инициализируются и используются в одном блоке.
//        var может использоваться при объявлении локальных переменных, включая индексные переменные цикла for.
//        var нельзя использовать для полей, параметров методов и возвращаемых типов методов.
//        var обязательно нужно инициализировать иначе компилятор не поймет какой тип данных хранится в нем.
        System.out.println("Неявная типизация");

        var a = 123;
        System.out.println(a);
        var d = 123.456;
        System.out.println(d);

        System.out.println(getType(a));
        System.out.println(getType(d));
        d = 1022;
        System.out.println(d);
        System.out.println();


/*------------------(Классы обертки)-------------------------
    Примитив    Обертка
      int     -  Integer
     short    -  Short
     long     -  Long
     byte     -  Byte
     float    -  Float
     double   -  Double
     char     -  Character
    boolean   -  Boolean
*/
//        Классы-обертки позволяют нивелировать недостатки, которые есть у примитивных типов.
//        Примитивы используются когда нужна производительность, а классы-обертки когда нужна функциональность.
        System.out.println("Классы обертки");

        System.out.println(Integer.MAX_VALUE);
        System.out.println(Integer.MIN_VALUE);

        int ii = 2;
        String s = "3";
        System.out.println(ii + Integer.parseInt(s)); // строку в число
        System.out.println();


/*------------------(Операции Java)-------------------------
    Присваивание: =
    Арифметические: *, /, +, -, %, ++, --
    Операции сравнения: <, >, ==, !=, >=, <=
    Логические операции: ||, &&, ^, !
    Побитовые операции: <<, >>, &, |, ^
 */
/*
    !	Логическое “не” (отрицание).  !x означает “не x”. Возвращает true если операнд является false. Возвращает false если операнд является true.

    &	Логическое И (AND, умножение).  Возвращает true если оба операнда равны true.
    &&	Условное И (сокращённое логическое И).  То же самое, что и &, но если операнд, находящийся слева от & является false, данный оператор возвращает false без проверки второго операнда.
         a	     b	    a & b
        true	true	true
        true	false	false
        false	true	false
        false	false	false

    |	Логическое ИЛИ (OR, сложение).  Возвращает true если хотя бы один из операндов равен true.
    ||	Условное ИЛИ (сокращённое логическое ИЛИ).  То же самое, что и |, но если оператор слева является true, оператор возвращает true без проверки второго операнда.
         a	     b	    a | b
        true	true	true
        true	false	true
        false	true	true
        false	false	false

    ^	Логическое исключающее ИЛИ (XOR).  Возвращает true, если один и только один из операндов равен true. Возвращает false, если оба операнда равны true или false. По сути, возвращает true, если операнды — разные.
         a	     b	    a ^ b
        true	true	false
        true	false	true
        false	true	true
        false	false	false
*/
//        Приоритет логических операций (сначала): ! & ^ | && ||
//        Операции инкремента(++) и декремента(--) бывают двух видов: постфиксными - x++, и префиксными - ++x.
//        Присваивание осуществляется справа налево. Данное выражение (x = y = z) будет выполнено по шагам: y = z , то есть у = 256, x = y, то есть x = 256.
//        Комбинированные операции: x += y означает x = x + y.
        System.out.println("Операции Java");

        String ss = "qwe1";
        boolean b = ss.length() >= 5 && ss.charAt(4) == '1'; // Условие: (1) длинна строки больше или равна 5 и (2) четвертый символ равен 1. && - проверяет оба условия.
//        boolean b = s.length() >= 5 & s.charAt(4) == '1';
        System.out.println(b);
        System.out.println();


//------------------(Массивы)-------------------------
//        Массив — это структура данных, в которой хранятся элементы одного типа. Номер элемента в массиве называют индексом. Начинаются с нуля.
//        После создания массива с помощью new, в его ячейках записаны значения по умолчанию. Для численных типов это будет 0, для boolean — false, для ссылочных типов — null.
//        Длину массива нельзя изменить после его создания.
        System.out.println("Массивы");

        int[] arr = new int[10];                   // объявление и создание(выделение памяти: new) пустого массива на 10 ячеек.
        System.out.println(arr.length);

        arr = new int[] {1, 2, 3, 4, 5};           // инициализируем
//        int[] arr = {1, 2, 3, 4, 5};             // или так
        System.out.println(arr[3]);

        arr[2] = 6;                                // заменяем элемент
        System.out.println(arr[2]);

        for (int t = 0; t < arr.length; t++) {
            System.out.print(arr[t]);
        } // выводим в консоль
        System.out.println();

        // Многомерные массивы
//        Для работы с массивами в Java есть класс java.util.Arrays
//        Сортировка по возрастанию.         void sort(int[] myArray, int fromIndex, int toIndex)
//        Поиск элемента.                    int binarySearch(int[] myArray, int fromIndex, int toIndex, int key). Поиск key в массиве myArray начиная с fromIndex и до toIndex. Если найден возвращается его индекс, если нет - (-fromIndex)-1.
//        Преобразование массива в строку.   String toString(int[] myArray)
        System.out.println("Многомерные массивы");

        int[][] array = new int[3][5];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                System.out.printf("%d ", array[i][j]);
            }
            System.out.println();
        }
        System.out.println();


//------------------(Преобразования: явное и неявное)-------------------------
//        Тип boolean является единственным примитивным типом в Java, который нельзя преобразовать в другой примитивный тип. Кроме того, любой другой примитивный тип нельзя преобразовать в boolean.
//        Неявное преобразование типов выполняется в случае если выполняются условия: оба типа совместимы и длина целевого типа больше или равна длине исходного типа. Во всех остальных случаях должно использоваться явное преобразование типов.
//        Так же существуют два типа преобразований: расширяющее преобразование (widening conversion) и сужающее преобразование (narrowing conversion).
//        Неявное преобразование всегда имеет расширяющий тип. Сужающее преобразование это всегда явное преобразование типов.
        System.out.println("Преобразования: явное и неявное");

        int x = 123; double y = x;  // неявное
        System.out.println(x);
        System.out.println(y);

        y = 3.1415; x = (int)y;    // явное
        System.out.println(y);
        System.out.println(x);

        y = 3.9415; x = (int)y;
        System.out.println(y);
        System.out.println(x);

        byte c = Byte.parseByte("123");
        System.out.println(c);

//        c = Byte.parseByte("1234");
//        System.out.println(c);
        System.out.println();

        // Инварианты,ковариантность и контравариантность
//        int[] k = new int[10];
//        double[] h = k;
    }
}